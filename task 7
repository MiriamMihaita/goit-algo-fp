import random
import matplotlib.pyplot as plt

def monte_carlo_dice_simulation(num_simulations):
    results = {i: 0 for i in range(2, 13)}  # Initialize results for sums 2 to 12

    for _ in range(num_simulations):
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        result_sum = dice1 + dice2
        results[result_sum] += 1
    
    return results

def calculate_probabilities(results, num_simulations):
    probabilities = {sum_val: (count / num_simulations) * 100 for sum_val, count in results.items()}
    return probabilities

def print_probability_table(probabilities):
    print("Sum\tProbability")
    for sum_val in sorted(probabilities):
        print(f"{sum_val}\t{probabilities[sum_val]:.2f}%")

def compare_with_analytical(probabilities):
    analytical_probabilities = {
        2: 2.78, 3: 5.56, 4: 8.33, 5: 11.11, 6: 13.89, 7: 16.67,
        8: 13.89, 9: 11.11, 10: 8.33, 11: 5.56, 12: 2.78
    }

    print("\nComparison with Analytical Probabilities:")
    print("Sum\tMonte Carlo\tAnalytical")
    for sum_val in sorted(probabilities):
        print(f"{sum_val}\t{probabilities[sum_val]:.2f}%\t\t{analytical_probabilities[sum_val]}%")

def plot_probabilities(probabilities):
    sums = sorted(probabilities.keys())
    monte_carlo_probs = [probabilities[sum_val] for sum_val in sums]
    analytical_probs = [2.78, 5.56, 8.33, 11.11, 13.89, 16.67, 13.89, 11.11, 8.33, 5.56, 2.78]

    plt.figure(figsize=(10, 5))
    plt.bar(sums, monte_carlo_probs, color='blue', alpha=0.7, label='Monte Carlo')
    plt.plot(sums, analytical_probs, color='red', marker='o', label='Analytical', linestyle='--')
    plt.xlabel('Sum of Dice')
    plt.ylabel('Probability (%)')
    plt.title('Monte Carlo vs Analytical Probabilities of Dice Sums')
    plt.legend()
    plt.grid(True)
    plt.show()

# Program execution

num_simulations = 1000000 
results = monte_carlo_dice_simulation(num_simulations)
probabilities = calculate_probabilities(results, num_simulations)

# Display table of probabilities
print_probability_table(probabilities)

# Comparison with analytical probabilities
compare_with_analytical(probabilities)

# Plotting probabilities
plot_probabilities(probabilities)
