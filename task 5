import networkx as nx
import matplotlib.pyplot as plt

class Node:
    def __init__(self, key, color="#000000"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color  # Store the color of the node

def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.val, color=node.color)  # Save a node's color in the graph
        if node.left:
            graph.add_edge(node.val, node.left.val)
            l = x - 1 / 2 ** layer
            pos[node.left.val] = (l, y - 1)
            l = add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.val, node.right.val)
            r = x + 1 / 2 ** layer
            pos[node.right.val] = (r, y - 1)
            r = add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph

def draw_tree(tree_root):
    tree = nx.DiGraph()
    pos = {(tree_root.val): (0, 0)}
    tree = add_edges(tree, tree_root, pos)

    colors = [node[1]['color'] for node in tree.nodes(data=True)]  # Collect node colors to display

    plt.figure(figsize=(8, 5))
    nx.draw(tree, pos=pos, with_labels=True, arrows=False, node_size=2500, node_color=colors)
    plt.show()

def create_color_gradient(n):
    """Generate a list of n colors, from dark to light."""
    gradient = []
    for i in range(n):
        value = int(255 * (i / (n - 1)))  # calculate intensity
        hex_value = f'#{value:02X}{value:02X}{255:02X}'  # blue color from dark to light
        gradient.append(hex_value)
    return gradient

def dfs_traversal(root, colors, color_index=[0]):
    """Perform DFS and color nodes."""
    if root is not None:
        root.color = colors[color_index[0]]
        color_index[0] += 1
        draw_tree(root)
        plt.pause(0.5)  # Pause to visualize each step
        dfs_traversal(root.left, colors, color_index)
        dfs_traversal(root.right, colors, color_index)

def bfs_traversal(root, colors):
    """Perform BFS and color nodes."""
    queue = [root]
    color_index = 0
    while queue:
        current = queue.pop(0)
        current.color = colors[color_index]
        color_index += 1
        draw_tree(root)
        plt.pause(0.5)  # Pause to visualize each step
        if current.left:
            queue.append(current.left)
        if current.right:
            queue.append(current.right)

def visualize_traversal(tree_root, traversal_type='dfs'):
    node_count = count_nodes(tree_root)
    colors = create_color_gradient(node_count)
    if traversal_type == 'dfs':
        dfs_traversal(tree_root, colors)
    elif traversal_type == 'bfs':
        bfs_traversal(tree_root, colors)
    else:
        print("Invalid traversal type. Choose 'dfs' or 'bfs'.")

def count_nodes(root):
    if root is None:
        return 0
    return 1 + count_nodes(root.left) + count_nodes(root.right)

# Creating the tree
root = Node(0)
root.left = Node(4)
root.left.left = Node(5)
root.left.right = Node(10)
root.right = Node(1)
root.right.left = Node(3)

# Visualize DFS Traversal
visualize_traversal(root, traversal_type='dfs')

# Visualize BFS Traversal
# visualize_traversal(root, traversal_type='bfs')
