class Node:
  def __init__(self, data):
      self.data = data
      self.next = None

class SinglyLinkedList:
  def __init__(self):
      self.head = None

  def append(self, data):
      new_node = Node(data)
      if not self.head:
          self.head = new_node
          return
      last_node = self.head
      while last_node.next:
          last_node = last_node.next
      last_node.next = new_node

  def print_list(self):
      cur_node = self.head
      while cur_node:
          print(cur_node.data, end=" -> ")
          cur_node = cur_node.next
      print("None")

  def reverse_list(self):
      prev = None
      current = self.head
      while current:
          next_node = current.next
          current.next = prev
          prev = current
          current = next_node
      self.head = prev

  def insertion_sort(self):
      sorted_list = None
      current = self.head
      while current:
          next_node = current.next
          sorted_list = self.sorted_insert(sorted_list, current)
          current = next_node
      self.head = sorted_list

  def sorted_insert(self, sorted_list, new_node):
      if not sorted_list or new_node.data < sorted_list.data:
          new_node.next = sorted_list
          return new_node
      current = sorted_list
      while current.next and current.next.data < new_node.data:
          current = current.next
      new_node.next = current.next
      current.next = new_node
      return sorted_list

def merge_sorted_lists(list1, list2):
  dummy = Node(0)
  tail = dummy

  while list1 and list2:
      if list1.data < list2.data:
          tail.next = list1
          list1 = list1.next
      else:
          tail.next = list2
          list2 = list2.next
      tail = tail.next

  if list1:
      tail.next = list1
  if list2:
      tail.next = list2

  return dummy.next

# Example Usage
list1 = SinglyLinkedList()
list1.append(1)
list1.append(3)
list1.append(5)

list2 = SinglyLinkedList()
list2.append(2)
list2.append(4)
list2.append(6)

merged_list = SinglyLinkedList()
merged_list.head = merge_sorted_lists(list1.head, list2.head)
merged_list.print_list()
