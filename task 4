import networkx as nx
import matplotlib.pyplot as plt

class Node:
    def __init__(self, key, color="skyblue"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color  # Additional argument to store the color of the node

class BinaryHeap:
    def __init__(self):
        self.root = None
        self.nodes = []  # This list will store nodes level by level

    def insert(self, key):
        new_node = Node(key)
        self.nodes.append(new_node)
        if len(self.nodes) == 1:
            self.root = new_node
        else:
            parent_index = (len(self.nodes) - 2) // 2
            parent_node = self.nodes[parent_index]
            if parent_node.left is None:
                parent_node.left = new_node
            else:
                parent_node.right = new_node

        self.heapify_up(len(self.nodes) - 1)

    def heapify_up(self, index):
        parent_index = (index - 1) // 2
        if index > 0 and self.nodes[index].val < self.nodes[parent_index].val:
            self.nodes[index].val, self.nodes[parent_index].val = self.nodes[parent_index].val, self.nodes[index].val
            self.heapify_up(parent_index)

def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.val, color=node.color)  # Saving a node color in a graph
        if node.left:
            graph.add_edge(node.val, node.left.val)
            l = x - 1 / 2 ** layer
            pos[node.left.val] = (l, y - 1)
            l = add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.val, node.right.val)
            r = x + 1 / 2 ** layer
            pos[node.right.val] = (r, y - 1)
            r = add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph

def draw_tree(tree_root):
    tree = nx.DiGraph()
    pos = {(tree_root.val): (0, 0)}
    tree = add_edges(tree, tree_root, pos)

    colors = [node[1]['color'] for node in tree.nodes(data=True)]  # Collect node colors to display

    plt.figure(figsize=(8, 5))
    nx.draw(tree, pos=pos, with_labels=True, arrows=False, node_size=2500, node_color=colors)
    plt.show()

def visualize_heap(heap):
    if heap.root is not None:
        draw_tree(heap.root)
    else:
        print("The heap is empty.")

# Creating the binary heap and inserting elements
heap = BinaryHeap()
heap.insert(10)
heap.insert(4)
heap.insert(9)
heap.insert(1)
heap.insert(7)
heap.insert(5)
heap.insert(3)

# Visualizing the binary heap
visualize_heap(heap)
