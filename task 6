# Step 1: Implementing the Greedy Algorithm

def greedy_algorithm(items, budget):
    # Calculate the calorie to cost ratio for each item
    items_sorted = sorted(items.items(), key=lambda x: x[1]['calories'] / x[1]['cost'], reverse=True)
    
    total_calories = 0
    selected_items = []
    
    for item, data in items_sorted:
        if budget >= data['cost']:
            budget -= data['cost']
            total_calories += data['calories']
            selected_items.append(item)
    
    return selected_items, total_calories

# Example usage:
items = {
    "pizza": {"cost": 50, "calories": 300},
    "hamburger": {"cost": 40, "calories": 250},
    "hot-dog": {"cost": 30, "calories": 200},
    "pepsi": {"cost": 10, "calories": 100},
    "cola": {"cost": 15, "calories": 220},
    "potato": {"cost": 25, "calories": 350}
}

budget = 100
selected_items, total_calories = greedy_algorithm(items, budget)
print("Selected items using Greedy Algorithm:", selected_items)
print("Total calories:", total_calories)


Step 2: Implementing the Dynamic Programming Algorithm
def dynamic_programming(items, budget):
    # Initialize a table to store the maximum calories at each budget level
    n = len(items)
    dp = [[0 for _ in range(budget + 1)] for _ in range(n + 1)]
    items_list = list(items.items())
    
    # Fill the dp table
    for i in range(1, n + 1):
        item_name = items_list[i - 1][0]
        cost = items_list[i - 1][1]['cost']
        calories = items_list[i - 1][1]['calories']
        for w in range(1, budget + 1):
            if cost <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - cost] + calories)
            else:
                dp[i][w] = dp[i - 1][w]
    
    # Backtrack to find the selected items
    selected_items = []
    w = budget
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:
            selected_items.append(items_list[i - 1][0])
            w -= items_list[i - 1][1]['cost']
    
    total_calories = dp[n][budget]
    return selected_items, total_calories

# Example usage:
selected_items_dp, total_calories_dp = dynamic_programming(items, budget)
print("Selected items using Dynamic Programming:", selected_items_dp)
print("Total calories:", total_calories_dp)
